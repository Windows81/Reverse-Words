
#include <set>
#include <vector>
#include <iostream>

bool hash(const int MODULO, const int CHAR_MULTIPLIERS[3]) {
	int DATA[][3] = { {65, 65}, { 65, 65, 48 }, { 65, 65, 49 }, { 65, 65, 50 }, { 65, 69 }, { 65, 69, 48 }, { 65, 69, 49 }, { 65, 69, 50 }, { 65, 72 }, { 65, 72, 48 }, { 65, 72, 49 }, { 65, 72, 50 }, { 65, 79 }, { 65, 79, 48 }, { 65, 79, 49 }, { 65, 79, 50 }, { 65, 87 }, { 65, 87, 48 }, { 65, 87, 49 }, { 65, 87, 50 }, { 65, 89 }, { 65, 89, 48 }, { 65, 89, 49 }, { 65, 89, 50 }, { 66, }, { 67, 72 }, { 68, }, { 68, 72 }, { 69, 72 }, { 69, 72, 48 }, { 69, 72, 49 }, { 69, 72, 50 }, { 69, 82 }, { 69, 82, 48 }, { 69, 82, 49 }, { 69, 82, 50 }, { 69, 89 }, { 69, 89, 48 }, { 69, 89, 49 }, { 69, 89, 50 }, { 70, }, { 71, }, { 72, 72 }, { 73, 72 }, { 73, 72, 48 }, { 73, 72, 49 }, { 73, 72, 50 }, { 73, 89 }, { 73, 89, 48 }, { 73, 89, 49 }, { 73, 89, 50 }, { 74, 72 }, { 75, }, { 76, }, { 77, }, { 78, }, { 78, 71 }, { 79, 87 }, { 79, 87, 48 }, { 79, 87, 49 }, { 79, 87, 50 }, { 79, 89 }, { 79, 89, 48 }, { 79, 89, 49 }, { 79, 89, 50 }, { 80, }, { 82, }, { 83, }, { 83, 72 }, { 84, }, { 84, 72 }, { 85, 72 }, { 85, 72, 48 }, { 85, 72, 49 }, { 85, 72, 50 }, { 85, 87 }, { 85, 87, 48 }, { 85, 87, 49 }, { 85, 87, 50 }, { 86, }, { 87, }, { 89, }, { 90, }, { 90, 72 } };
	std::set<long> vals;
	for (int i = 0; i < 84; i++) {
		long part = 0;
		for (size_t c = 0; c < 3; ++c)
			part += DATA[i][c] * CHAR_MULTIPLIERS[c];
		part %= MODULO;
		bool b = vals.insert(part).second;
		if (!b) return false;
	}
	return true;
}

int main()
{
	struct st {
		int a[3];
	};
	std::vector<st> c;
	for (int i2 = 1; i2 < 189; ++i2)
		for (int i3 = 1; i3 < 189; ++i3)
			for (int i4 = 1; i4 < 189; ++i4) {
				st s{ .a = { i2, i3, i4 } };
				if (hash(1e9, s.a))
					c.push_back(s);
			}
	for (int i1 = 188; i1 > 83; --i1)
		for (auto i = c.cbegin(); i != c.cend(); ++i)
			if (hash(i1, i->a))
				std::cout << i1 << ' ' << i->a[0] << ' ' << i->a[1] << ' ' << i->a[2] << std::endl;
}